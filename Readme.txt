После того как расписал всё это сочинение решил проверить таки своими руками правильно ли работает библиотека.
Написал свой бенчмарк на стопвотчах и запустил его на маленьких количествах вычислений и на больших. 
Теперь всё намного понятнее. Результат прикладываю.



Замер производительности при малом количестве вычислений (порядка 10)

Класс Point и тип данных Float.               Выполнение заняло 0 мс. Или 00:00:00.0000021 нс   - на третьем месте, т.к. при небольших количествах операций большие затраты на инициализацию объектов слишком высоки и занимают большую часть времени                      
Структура Point и тип данных Float.           Выполнение заняло 0 мс. Или 00:00:00.0000003 нс   - на втором месте, т.к. при небольших количествах операций быстрота инициализации структур имеет большее значение, чем то, что значения нужно копировать целиком          
Структура Point и тип данных Double.          Выполнение заняло 0 мс. Или 00:00:00.0000572 нс   - последняя по скорости, т.к. double занимает в 2 раза больше памяти
Структура Point и тип данных Float, без Sqrt. Выполнение заняло 0 мс. Или 00:00:00.0000002 нс   - быстрее всех, т.к. при небольших количествах операций быстрота инициализации структур имеет большее значение и не нужно вычислять трудоемкий корень



Замер производительности при большом количестве вычислений (порядка 1 000 000 000)

Класс Point и тип данных Float.               Выполнение заняло 3886 мс. Или 00:00:03.8860207 нс    - на втором месте, т.к. при таком количестве вычислений передача значений по ссылке, вместо их копирования уже нивелирует затраты на инициализацию объектов.
Структура Point и тип данных Float.           Выполнение заняло 5108 мс. Или 00:00:05.1088311 нс    - на последнем месте, т.к. при больших количествах операций копировать каждый раз значения становится слишком невыгодно, плюс приходится каждый раз конвертировать корень из double в float
Структура Point и тип данных Double.          Выполнение заняло 4396 мс. Или 00:00:04.3965582 нс    - на третьем месте, т.к. при такм количестве отсутствие лишних конвертаций из одного типа в другой уже превосходит тот фактор, что для double нужно больше памяти
Структура Point и тип данных Float, без Sqrt. Выполнение заняло 2428 мс. Или 00:00:02.4285648 нс    - быстрее всех, т.к. не нужно вычислять трудоемкий корень, что нивелирует затраты на копирование значений в структуре